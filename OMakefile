.PHONY: all

USE_OCAMLFIND = true
NATIVE_ENABLED = true
BYTE_ENABLED = true

if $(not $(defined RELEASE))
   RELEASE=false
   export

if $(RELEASE)
   WARNING_ERROR=
   export
else
   WARNING_ERROR=@
   export

OCAMLFLAGS = -thread -g -w $(WARNING_ERROR)A-4-29-41-44-45 -bin-annot
OCAMLPACKS[] = ocplib-endian

if $(equal $(getenv thread, async), lwt)
   OCAMLPACKS[] += lwt lwt.unix
   THREAD_FILE = amqp_thread_lwt.ml
   export
else
   OCAMLPACKS[] += async async_unix
   THREAD_FILE = amqp_thread_async.ml
   export

mkdir -p _build
vmount(-l, src, _build)
vmount(-l, tests, _build)

.SUBDIRS: _build
    amqp_thread.ml: $(THREAD_FILE)
        ln -fs $< $@

    section
	gen_spec: gen_spec.ml
            ocamlfind ocamlopt -package xml-light,str -linkpkg -o $@ $<

        AMQP_SPEC_URL = http://www.rabbitmq.com/resources/specs/amqp0-9-1.extended.xml
        AMQP_SPEC = $(rootname $(basename $(AMQP_SPEC_URL)))
        $(AMQP_SPEC):
            mkdir -p data
            curl $(AMQP_SPEC_URL) > $@

        amqp_spec.ml: gen_spec $(AMQP_SPEC)
            ./gen_spec -type specification $(AMQP_SPEC) > $@

        amqp_constants.ml: gen_spec $(AMQP_SPEC)
            ./gen_spec -type constants $(AMQP_SPEC) > $@

    section
        FILES[] =
            amqp_types
            amqp_spec
            amqp_framing
            amqp_constants
            amqp_io
            amqp_protocol
            amqp_protocol_helpers
            amqp_channel
            amqp_connection
            amqp_queue
            amqp_rpc
            amqp_exchange
            amqp_message
	    amqp_thread
            amqp

        OCamlLibrary(amqp-client, $(FILES))

	.doc.made: amqp-client.a
	.doc.made: $(filter-exists $(addsuffix .mli, $(FILES))) $(addsuffix .ml, $(FILES))
		mkdir -p doc
		ocamlfind ocamldoc -thread -html -d doc $^ -package "$(OCAMLPACKS)"
		touch $@

	.PHONY: install

    section
	OCAML_LIBS += amqp-client

	TESTS=$(rootname $(basename $(find ../tests/ -name *.ml)))

	foreach(x => ..., $(TESTS))
		OCamlProgram($(x), $(x))

	.DEFAULT: $(TESTS)

        .PHONY: test

	TESTS=$(filter %_test, $(TESTS))
	test: $(TESTS)
	    foreach(test => ..., $(TESTS))
	        echo "====== $(test) ======"
		./$(test)

.PHONY: clean
clean:
	$(RM) -r _build	OMake*.omc
	$(RM) $(find . -name \*~)
	$(RM) -r .omake*

.PHONY: html
html: _build/.doc.made
	git -C html rm -fr \*
	cp _build/doc/* html
	git -C html add '*' && echo ok
	git -C html commit --amend -m "Update documentation"
#git -C html push --force
